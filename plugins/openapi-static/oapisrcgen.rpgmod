**FREE

dcl-c O_RDONLY   1;
dcl-c O_WRONLY   2;
dcl-c O_CREAT    8;
dcl-c O_CCSID    32;
dcl-c O_TRUNC    64;
dcl-c O_CODEPAGE 8388608;
dcl-c O_TEXTDATA 16777216;
// Note: O_TEXT_CREAT requires all of the following flags to work:
//           O_CREAT+O_TEXTDATA+(O_CODEPAGE or O_CCSID)
dcl-c O_TEXT_CREATE 33554432;

dcl-c S_IRWXU 448;

dcl-pr close int(10) extproc('close');
    fildes int(10) value;
end-pr;

dcl-pr open int(10) extproc('open');
    path pointer value options(*string);
    openflags int(10) value;
    mode uns(10) value options(*nopass);
    ccsid uns(10) value options(*nopass);
    txtcreatid uns(10) value options(*nopass);
end-pr;

dcl-pr read int(10) extproc('read');
    fildes int(10) value;
    buffer pointer value;
    bytes uns(10) value;
end-pr;
   
dcl-pr write int(10) extproc('write');
    fildes int(10) value;
    buffer pointer value;
    bytes uns(10) value;
end-pr;

dcl-pr unlink int(10) extproc(*dclcase);
  path pointer value options(*string);
end-pr;

dcl-pr errno pointer extproc('__errno') end-pr;

dcl-pr strerror pointer extproc('strerror');
  errno  int(10) value;
end-pr;

dcl-pr strlen uns(10) extproc('strlen');
  string pointer value;
end-pr;

/include 'llist_h.rpgle'
/include 'message_h.rpgle'

dcl-ds inputFilePaths_t qualified template;
    count int(5);
    filePath char(1000) dim(100);
end-ds;

dcl-ds qualMemberPath_t qualified template;
    library char(10);
    file char(10);
    member char(10);
end-ds;

dcl-ds RIOFB_T qualified template;
    key pointer;
    sysparm pointer;
    rrn uns(10);
    num_bytes int(10);
    blk_count int(5);
    blk_filled_by char(1);
    booleanFlags char(1);
    reserved2 char(20);
end-ds;


dcl-pr ropen pointer extproc('_Ropen');
    filename pointer value options(*string);
    filemode pointer value options(*string);
end-pr;

dcl-pr rclose extproc('_Rclose');
    file pointer value;
end-pr;

dcl-pr rreadn pointer extproc('_Rreadn');
    file pointer value;
    buffer pointer value;
    size uns(10) value;
    options int(10) value;
end-pr;

dcl-c RIO_NO_LOCK x'00000001';

dcl-ds qusec_t qualified template;
  bytesProvided int(10);
  bytesAvailable int(10);
  exceptionId char(7);
  reserved char(1);
end-ds;

dcl-pr sys_retrieveFileDescription extpgm('QDBRTVFD');
  FileDesc char(32767) options(*varsize);
  FileDscL int(10)   const;
  FileQNam char(20);
  FileDFmt char(8)   const;
  FileName char(20)  const;
  FileRFmt char(10)  const;
  FileOvrP char(1)   const;
  FileSysN char(10)  const;
  FileFmtT char(10)  const;
  FileErrC likeds(qusec_t) options(*varsize);
end-pr;

dcl-ds db_format_header_t qualified template;
    data char(256);
    recordLength int(10) pos(67);
    recordFormatName char(10) pos(71);
end-ds;


dcl-pr OAPISRCGEN extpgm('OAPISRCGEN');
    p_inputFilePaths likeds(inputFilePaths_t);
    p_outputFilePath char(1000);
end-pr;

dcl-pi *n;
    p_input likeds(inputFilePaths_t);
    p_outputFilePath char(1000);
end-pi;


main();
*inlr = *on;


dcl-proc main export;
    dcl-s lines pointer;
    dcl-s i int(5);
    dcl-s openapi_main pointer;
    dcl-s openapi_path pointer;
    dcl-s openapi_comp pointer;
    
    openapi_main = list_create();
    openapi_path = list_create();
    openapi_comp = list_create();
    
    for i = 1 to p_input.count;
        lines = readLines(%trim(p_input.filePath(i)));
        parseLines(lines : openapi_main : openapi_path : openapi_comp);
    endfor;    
    
    writeOpenApiDocument(%trim(p_outputFilePath) : openapi_main : openapi_path : openapi_comp);
    
    on-exit;
        list_dispose(openapi_main);
        list_dispose(openapi_path);
        list_dispose(openapi_comp);
    
        if (lines <> *null);
            list_dispose(lines);
        endif;
end-proc;


dcl-proc writeOpenApiDocument export;
    dcl-pi *n;
        p_outputFilePath varchar(1000) const;
        p_openapi_main pointer value;
        p_openapi_path pointer value;
        p_openapi_comp pointer value;
    end-pi;

    dcl-s fd int(10) inz(-1);
    dcl-s message char(255);
    dcl-s c_errno int(10) based(pErrno);
    
    unlink(p_outputFilePath);
    fd = open(p_outputFilePath : O_WRONLY+O_CREAT+O_TEXTDATA+O_CCSID : S_IRWXU : 1252 : 1252);
    if (fd < 0);
        pErrno = errno();
        message = %str(strerror(c_errno) : %size(message));
        message_info(message);
        return;
    endif;
    
    writeLines(fd : p_openapi_main);
    writeLines(fd : p_openapi_path : 'paths:' : 2);
    writeLines(fd : p_openapi_comp : 'components:' : 2);
    
    on-exit;
        callp close(fd);
end-proc;


dcl-proc writeLines;
    dcl-pi *n;
        fd int(10) value;
        lines pointer value;
        p_sectionHeader varchar(20) ccsid(1252) const options(*nopass);
        indentLevel uns(3) const options(*nopass);
    end-pi;

    dcl-s LF char(1) inz(x'0A') ccsid(*hex);
    dcl-s buffer char(4096) ccsid(*hex) based(ptr);
    dcl-s length uns(10);
    dcl-s sectionHeader varchar(20) ccsid(1252);
    dcl-s spaces char(256) ccsid(1252);
    
    if (list_isEmpty(lines));
        return;
    endif;
    
    if (%parms() >= 3);
        sectionHeader = p_sectionHeader;
        callp write(fd : %addr(sectionHeader : *data) : %len(sectionHeader));
    endif;
    
    ptr = list_iterate(lines);
    dow (ptr <> *null);
        if (%parms() >= 4);
            callp write(fd : %addr(spaces) : indentLevel);
        endif;
    
        length = strlen(ptr);
        if (length > 0);
            callp write(fd : %addr(buffer) : length);
        endif;
        callp write(fd : %addr(LF) : 1);
        
        ptr = list_iterate(lines);
    enddo;
end-proc;


dcl-proc parseLines;
    dcl-pi *n;
        lines pointer;
        p_openapi_main pointer value;
        p_openapi_path pointer value;
        p_openapi_comp pointer value;
    end-pi;

    dcl-s OPENAPI_MAIN char(20) ccsid(1252);
    dcl-s OPENAPI_PATH char(20) ccsid(1252);
    dcl-s OPENAPI_COMP char(20) ccsid(1252);
    dcl-s sectionType char(20) ccsid(1252);
    dcl-s line varchar(4096) ccsid(1252) based(ptr);
    dcl-s temp varchar(4096) ccsid(1252);
    dcl-s tempSection varchar(20) ccsid(1252);
    dcl-s space char(1) ccsid(1252);
    dcl-s tempStart char(2) ccsid(1252) based(tempStartPtr);
    dcl-s commentChars char(2) ccsid(1252) inz('//');
    dcl-s message char(52);
    dcl-s i int(10);

    OPENAPI_MAIN = u'0040' + 'openApi';
    OPENAPI_PATH = u'0040' + 'openApiPath';
    OPENAPI_COMP = u'0040' + 'openApiComponent';

    tempStartPtr = %addr(temp : *data);

    ptr = list_iterate(lines);
    dow (ptr <> *null);
        temp = %triml(line : space);
        
        if (%len(temp) < 2 or tempStart <> commentChars);
            // no comment anymore
            sectionType = *blank;
        else;
        
            // strip comment chars
            if (%len(temp) <= 3);
                clear temp;
            elseif (%len(temp) > 3);
                temp = %subst(temp : 4);
            endif;
            
            tempSection = %trim(temp : space);
            if (tempSection = OPENAPI_MAIN);
                sectionType = OPENAPI_MAIN;
            elseif (tempSection = OPENAPI_PATH);
                sectionType = OPENAPI_PATH;
            elseif (tempSection = OPENAPI_COMP);
                sectionType = OPENAPI_COMP;
            elseif (sectionType <> *blank);
            
                select;
                when (sectionType = OPENAPI_MAIN);
                    list_add(p_openapi_main : %addr(temp : *data) : %len(temp));
                when (sectionType = OPENAPI_PATH);
                    list_add(p_openapi_path : %addr(temp : *data) : %len(temp));
                when (sectionType = OPENAPI_COMP);
                    list_add(p_openapi_comp : %addr(temp : *data) : %len(temp));
                endsl;

            endif;
        endif;
        
        ptr = list_iterate(lines);
    enddo;
    
end-proc;


dcl-proc readLines;
    dcl-pi *n pointer;
        p_inputFilePath varchar(1000) const;
    end-pi;

    if (%len(p_inputFilePath) <= 10);
        return readLinesFromStreamFile(p_inputFilePath);
    elseif (%subst(p_inputFilePath : 1 : 10) = '/QSYS.LIB/');
        return readLinesFromMember(p_inputFilePath);
    else;
        return readLinesFromStreamFile(p_inputFilePath);
    endif;
end-proc;


dcl-proc readLinesFromMember;
    dcl-pi *n pointer;
        p_inputFilePath varchar(1000) const;
    end-pi;

    dcl-s inputPath varchar(34);
    dcl-ds path likeds(qualMemberPath_t);
    dcl-s file pointer;
    dcl-ds buffer qualified;
      raw char(1000);
      line char(988) pos(13);
    end-ds;
    dcl-ds iofb likeds(RIOFB_T) based(iofbPtr);
    dcl-s recordLength uns(10);
    
    dcl-s lines pointer;
    dcl-s line varchar(1000) ccsid(1252);
    
    lines = list_create();
    
    path = parseQsysPath(p_inputFilePath);
    if (path = *blank);
        message_info('Could not parse input file path. Skipping ' + p_inputFilePath);
        return lines;
    endif;
    
    inputPath = %trimr(path.library) + '/' + %trimr(path.file) + '(' + %trimr(path.member) + ')';
    recordLength = getRecordLength(path.library : path.file);
    
    file = ropen(inputPath : 'rr,blkrcd=Y,lrecl=' + %char(recordLength));
    if (file = *null);
        message_info('Could not open input file. Skipping ' + p_inputFilePath);
        return lines;
    endif;

    iofbPtr = rreadn(file : %addr(buffer) : recordLength : RIO_NO_LOCK);
    dow (iofb.num_bytes > 0);
        line = %trimr(%subst(buffer.line : 1 : iofb.num_bytes));
        list_add(lines : %addr(line) : %size(line));

        iofbPtr = rreadn(file : %addr(buffer) : recordLength : RIO_NO_LOCK);
    enddo;

    return lines;
    
    on-exit;
        rclose(file);
end-proc;


dcl-proc readLinesFromStreamFile;
    dcl-pi *n pointer;
        p_inputFilePath varchar(1000) const;
    end-pi;

    dcl-s lines pointer;
    dcl-s buffer char(1048576) ccsid(*hex);
    dcl-s bufferLength int(10);
    dcl-s line varchar(4096) ccsid(1252);
    dcl-s position int(10) inz(1);
    dcl-s moreLines ind;
    dcl-s inputFd int(10);
    
    lines = list_create();
    
    inputFd = open(p_inputFilePath : O_RDONLY + O_CCSID + O_TEXTDATA : S_IRWXU : 1252);
    if (inputFd < 0);
        message_info('Could not open input file. Skipping ' + p_inputFilePath);
        return lines;
    endif;

    bufferLength = read(inputFd : %addr(buffer) : %size(buffer));
    
    moreLines = nextLine(buffer : bufferLength : position : line);
    dou (not moreLines);
        line = %trimr(line);
        list_add(lines : %addr(line) : %size(line));
        
        moreLines = nextLine(buffer : bufferLength : position : line);
    enddo;
    
    if (%len(line) > 0);
        list_add(lines : %addr(line) : %size(line));
    endif;
    
    return lines;
    
    on-exit;
        if (inputFd >= 0);
            callp close(inputFd);
        endif;
end-proc;


dcl-proc nextLine export;
    dcl-pi *n ind;
        buffer char(1048576) ccsid(*hex);
        bufferLength int(10) const;
        position int(10);
        line varchar(4096) ccsid(1252);
    end-pi;

    dcl-s LF char(1) inz(x'0A') ccsid(1252);
    dcl-s x int(10);
    dcl-s temp varchar(4096) ccsid(*hex);
    dcl-s moreLines ind;
    
    x = %scan(LF : buffer : position);
    if (x = 0);
        line = %subst(buffer : position : bufferLength - position + 1);
        moreLines = *off;
    else;
        line = %subst(buffer : position : x - position);
        position = x + 1;
        moreLines = *on;
    endif;
    
    return moreLines;
end-proc;


dcl-proc parseQsysPath;
    dcl-pi *n likeds(qualMemberPath_t);
        p_inputFilePath varchar(1000) const;
    end-pi;

    dcl-ds path likeds(qualMemberPath_t) inz;
    dcl-s x int(10);
    dcl-s x2 int(10);
    
    // /QSYS.LIB/LIBRARY.LIB/FILE.FILE/MEMBER.MBR
    
    // /QSYS.LIB/ = length 10
    x = %scan('/' : p_inputFilePath : 11);
    if (x = 0);
        return *blank;
    endif;
    
    path.library = %subst(p_inputFilePath : 11 : x - 11 - 4);
    
    x2 = %scan('/' : p_inputFilePath : x + 1);
    if (x2 = 0);
        return *blank;
    endif;
    
    path.file = %subst(p_inputFilePath : x + 1 : x2 - x - 6);
    
    x = %scan('.' : p_inputFilePath : x2 + 1);
    if (x = 0);
        return *blank;
    else;
        path.member = %subst(p_inputFilePath : x2 + 1 : x - x2 - 1);
    endif;
    
    return path;
end-proc;


dcl-proc getRecordLength;
    dcl-pi *n uns(10);
        library char(10) value;
        filename char(10) value;
    end-pi;

    dcl-ds receiver likeds(db_format_header_t) inz;
    dcl-s returnedFileName char(20);
    dcl-ds qusec likeds(qusec_t) inz;

    sys_retrieveFileDescription(
        receiver :
        %len(receiver.data) :
        returnedFileName :
        'FILD0200' :
        filename + library :
        '*FIRST' :
        '1' :
        '*LCL' :
        '*EXT' :
        qusec
    );

    return receiver.recordLength;
end-proc;

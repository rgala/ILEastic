**FREE

ctl-opt nomain;


/include 'assert.rpginc'
/include 'jwt.rpginc'

dcl-c LF u'000A';
dcl-c UNICODE_LEFT_CURLY_BRACE u'007B';
dcl-c UNICODE_RIGHT_CURLY_BRACE u'007D';

dcl-s tokenHs256 like(jwt_token_t) ccsid(*utf8) inz('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0IiwibmFtZSI6Ik1paGFlbCJ9.enc3UilS4swTRKV5J8R_TK8Z-208tZFJjduNQQc-hEE');
dcl-s signKeyHs256 like(jwt_signKey_t) ccsid(*utf8) inz('123456789012345678901234567890AB');

dcl-s tokenRs256 like(jwt_token_t) ccsid(*utf8) inz('eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0IiwibmFtZSI6Ik1paGFlbCJ9.zUSi8lW7GFS_8xIczLL9H7suBNfSWFpH1WI8aevO9zprdwLrCSsVJFzH7UAJ3GwsVP_0lun0AHCWBnJY1522gjQxrZLgQ51aM6fIU3oYroeP1ZyYNuY7Aioda5N6jUoZg2MQvjNY2Z3Ru0D9TEexMuB1jLzJx8rQ--igTgLFyaHskZE8bi-fWip2bMBAZ8idN2k6QABf9A92g1a6oLkM7KODiQV-cGjgeMhqxZdVExmPc24GBHi4PYm7UY1b9fWZ-unCKPN_YXyHuNSIQrsaadANnIUegfoxQ55pJCop6JJvpM8VO5Xe6VVUnPG_jfLJPPkyTXWayxTBa3sbmFoyAg');


dcl-proc test_verify_hs256 export;
    dcl-ds options likeds(jwt_options_t) inz;
  
    options.key = signKeyHs256;
  
    assert(jwt_verify(tokenHs256 : options) : 'Token is not valid.');
end-proc;


dcl-proc test_verify_rs256 export;
    dcl-ds options likeds(jwt_options_t) inz;
    dcl-s publicKey like(jwt_signKey_t) ccsid(*utf8); 
        
    publicKey =
        '-----BEGIN CERTIFICATE-----' + LF +
        'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0CfTwHgz2CoNTxx8KYVm' + LF +
        'stdsVJrvgKqyiui7fO+VFga1pAAPcUsNtU3aRFRE9FWLId9z0AoEdYV7pOWxfFrq' + LF +
        'J/M63MByIFfnVLGdR7k6MKKFaiTPNAv7/qAiWvIDHPIyCCbfRRuJ44LOUFTyn6fp' + LF +
        '9cnUNpAxNCTLJvhebaPB4zF/QroetOHizGfoRybBJyFZ2Rmuog/KKmdgBQSaPqTk' + LF +
        'sOg+SOjf0BuGvycIaIr3rLeK0WO4o9GRBQCtLK6sURwNNO4F7LBPHVC1rtX0GnEZ' + LF +
        '7FmpOu0UopvYevxgwwNb2FQ5XY3mW4tiAMZLphJehjizXqcghYwu8sczb7QEz611' + LF +
        'KQIDAQAB'+ LF +
        '-----END CERTIFICATE-----' + LF ;
    options.key = publicKey;
  
    assert(jwt_verify(tokenRs256 : options) : 'Token is not valid.');
end-proc;


dcl-proc test_verify_wrongAlgorithm export;
    dcl-ds options likeds(jwt_options_t) inz;
    dcl-s publicKey like(jwt_signKey_t) ccsid(*utf8); 
        
    publicKey =
        '-----BEGIN CERTIFICATE-----' + LF +
        'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0CfTwHgz2CoNTxx8KYVm' + LF +
        'stdsVJrvgKqyiui7fO+VFga1pAAPcUsNtU3aRFRE9FWLId9z0AoEdYV7pOWxfFrq' + LF +
        'J/M63MByIFfnVLGdR7k6MKKFaiTPNAv7/qAiWvIDHPIyCCbfRRuJ44LOUFTyn6fp' + LF +
        '9cnUNpAxNCTLJvhebaPB4zF/QroetOHizGfoRybBJyFZ2Rmuog/KKmdgBQSaPqTk' + LF +
        'sOg+SOjf0BuGvycIaIr3rLeK0WO4o9GRBQCtLK6sURwNNO4F7LBPHVC1rtX0GnEZ' + LF +
        '7FmpOu0UopvYevxgwwNb2FQ5XY3mW4tiAMZLphJehjizXqcghYwu8sczb7QEz611' + LF +
        'KQIDAQAB'+ LF +
        '-----END CERTIFICATE-----' + LF ;
    options.key = publicKey;
    options.alg = JWT_HS512;
  
    assert(not jwt_verify(tokenRs256 : options) : 'Token is not valid.');
end-proc;


dcl-proc test_verify_noneConfiguredAlgorithm export;
    dcl-ds options likeds(jwt_options_t) inz;
    dcl-s token like(jwt_token_t) ccsid(*utf8);
  
    options.alg = JWT_ALG_NONE;
    token = 'eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0IiwibmFtZSI6Ik1paGFlbCJ9.f1GhJW54csF_g6q94FhCZVM1rPZc2_cbe7s3JNqzpiWNrXI57eQ2Vi0XoFF4FzFiFmI0S-QAGwYUTYE5K9h1SN5sraKD8_zGxsfjzgQdL0fBLe2aPF5A90IOpr6_vor4yjmTyZ2zRTXfseXUVx6KdZnHCtUdcM_ZSp9GTZnysSWdJQIWUS6ctpBL5oPENK6l9BMDvO_X4cFISWrLR23Iij_9fTuTFGq2CuUaTwKV9xLS-44ovp0PrbPffRyrFjGxzyanlS6866a2NZkX0ssZ9HE1IF1_yCwpgK8K3m4qx6SAMYz55n1Pg2dFdrzwSIuQX8uBnDbnB8dDoojMlIDvzQ';
  
    assert(not jwt_verify(token : options) : 'Token is not valid.');
end-proc;


dcl-proc test_expiredPayload export;
    dcl-ds options likeds(jwt_options_t) inz;
    dcl-s expiredToken like(jwt_token_t) ccsid(*utf8) inz('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0IiwibmFtZSI6Ik1paGFlbCIsImV4cCI6MTcwNDA4NjAyMH0.5-SSqp1KviAz0r4du4qxCayIAS66VHs2x7Ka0Xk9i38');
    dcl-s payload like(jwt_token_t) ccsid(*utf8);
    
    options.key = signKeyHs256;
    
    payload = jwt_decodePayload(expiredtoken);
    assert(jwt_isExpired(payload) : 'The passed token should have expired.');
end-proc;


dcl-proc test_expiredToken export;
    dcl-ds options likeds(jwt_options_t) inz;
    dcl-s expiredToken like(jwt_token_t) ccsid(*utf8) inz('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0IiwibmFtZSI6Ik1paGFlbCIsImV4cCI6MTcwNDA4NjAyMH0.5-SSqp1KviAz0r4du4qxCayIAS66VHs2x7Ka0Xk9i38');
    
    options.key = signKeyHs256;
    
    assert(jwt_isExpired(expiredToken) : 'The passed token should have expired.');
end-proc;


dcl-proc test_expiredWithoutExpClaim export;
    dcl-ds options likeds(jwt_options_t) inz;
    
    options.key = signKeyHs256;
    
    assert(not jwt_isExpired(tokenHs256) : 'The passed token should not have expired.');
end-proc;


dcl-proc test_activeWithoutNbfClaim export;
    dcl-ds options likeds(jwt_options_t) inz;
  
    options.key = signKeyHs256;
  
    assert(jwt_verify(tokenHs256 : options) : 'Token is not valid.');
end-proc;


dcl-proc test_activeWithNbfClaim export;
    dcl-ds options likeds(jwt_options_t) inz;
    dcl-s token like(jwt_token_t) ccsid(*utf8) inz('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0IiwibmFtZSI6Ik1paGFlbCIsIm5iZiI6MTcwNDA4NzkxMX0.cYQM5iLXMM6Os_XkV3Fv35YMvok3vSRppA7QFaim8Bw');
    
    options.key = signKeyHs256;
    
    assert(jwt_verify(token : options) : 'Token is not valid.');
end-proc;


dcl-proc test_inactive export;
    dcl-ds options likeds(jwt_options_t) inz;
    dcl-s token like(jwt_token_t) ccsid(*utf8) inz('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0IiwibmFtZSI6Ik1paGFlbCIsIm5iZiI6NDEwMjQ2NTUxMX0.QM9-sa4YQmnJAR9DY61wdZNjxXUlbOzOEcffDs3F8Kc');
    
    options.key = signKeyHs256;
    
    assert(not jwt_verify(token : options) : 'Token should not be active yet.');
end-proc;


dcl-proc test_signHs256 export;
    dcl-ds options likeds(jwt_options_t) inz;
    dcl-s signedToken like(jwt_token_t) ccsid(*utf8);
    dcl-s token like(jwt_token_t) ccsid(*utf8) inz('eyAiYWxnIiA6ICJIUzI1NiIsICJ0eXAiIDogIkpXVCIgfQ.eyAic3ViIiA6ICJtaWhhZWwiLCAibmFtZSIgOiAiTWloYWVsIiB9.a9ojVOdx5TnhgnL4jmjtKY4KhO6fiLtIWVECcDqH394');

    options.key = signKeyHs256;
    
    signedToken = jwt_sign(JWT_HS256 : UNICODE_LEFT_CURLY_BRACE + ' "alg" : "HS256", "typ" : "JWT" ' + UNICODE_RIGHT_CURLY_BRACE : UNICODE_LEFT_CURLY_BRACE + ' "sub" : "mihael", "name" : "Mihael" ' + UNICODE_RIGHT_CURLY_BRACE : options);
    assert(token = signedToken : 'Token is not valid.');
end-proc;


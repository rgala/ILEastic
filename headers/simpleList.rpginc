**FREE

dcl-ds SLISTNODE_t qualified template;
   pNext pointer; // struct SLISTNODE_t
   payLoadLength int(10);
   payloadData pointer;
end-ds;

dcl-ds SLIST_t qualified template;
   pHead pointer;
   pTail pointer;
   length int(10);
end-ds;

dcl-ds SLISTITERATOR_t qualified align(*full) template;
   pThis pointer; // pointer of type SLISTNODE_t
   pNext pointer; // pointer of type SLISTNODE_t
   hasNext ind;
end-ds;

dcl-ds SLISTKEYVAL_t qualified template;
   key likeds(LVARPUCHAR_t);
   value likeds(LVARPUCHAR_t);
end-ds;

dcl-ds LVARPUCHAR_t qualified template;
   length uns(10);
   string pointer;
end-ds;

dcl-ds PLVARCHAR_t qualified template;
   length int(10);
   string varchar(1024:4);
end-ds;

///
//    Create a new list
//
//    @return Pointer to a list
///
dcl-pr sList_new pointer extproc('sList_new');
end-pr;

///
//    Delete a list
//
//    @param  List descriptor
///
dcl-pr sList_free extproc('sList_free');
   hSlist likeds(SLIST_t) const; // simpleList.c: PSLIST
end-pr;

///
//    List push
//
//    @param  List descriptor
//    @param  Length of data
//    @param  Data
//    @param  *on - add to head, *off - add to tail
//
//    @return Pointer to a node
///
dcl-pr sList_push pointer extproc(*CWIDEN: 'sList_push'); // SLISTNODE_t
   hSlist likeds(SLIST_t) const; // PSLIST
   len uns(10) value;
   data pointer options(*string) value;
   head ind value;
end-pr;

///
//    Key list push
//
//    @param  List descriptor
//    @param  Key
//    @param  Value
//
//    @return Pointer to a node
///
dcl-pr sList_pushLVPC pointer extproc('sList_pushLVPC');
   hSlist likeds(SLIST_t) const; // PSLIST
   key likeds(LVARPUCHAR_t) const;
   value likeds(LVARPUCHAR_t) const;
end-pr;

///
//    Keyed list lookup
//
//    @param  List descriptor 
//    @param  Key to look for
//
//    @return Value
///
dcl-pr sList_lookupLVPC varchar(1024:4) rtnparm
                extproc('sList_lookupLVPC');
   hSlist likeds(SLIST_t) const; // PSLIST
   key varchar(1024:4) const;
end-pr;

///
//    Initialise a list iterator
//    
//    @param  List descriptor
//
//    @return List iterator
///
dcl-pr sList_setIterator likeds(SLISTITERATOR_t) extproc('sList_setIterator');
   hSlist likeds(SLIST_t) const; // PSLIST
end-pr;

///
//    Iterate over list
//
//    @param  List iterator
//
//    @return *off if end of list has been reached, *on if there are more elements
///
dcl-pr sList_foreach ind extproc('sList_foreach');
   iterator likeds(SLISTITERATOR_t) const; // simpleList.c: PSLISTITERATOR
end-pr;